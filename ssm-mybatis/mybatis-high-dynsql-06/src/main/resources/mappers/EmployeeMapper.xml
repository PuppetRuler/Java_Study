<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mybatis.mapper.EmployeeMapper">

    <!--
        如果传入属性，就判断相等，如果不传入，不加对应的条件
        where
        if 判断传入的参数，最终是否添加语句
            test属性 内部做比较运算，最终true将标签内的sql语句进行拼接
                                    false不拼接标签内部语句
                    判断语句：”key 比较符号 值 and | or key 比较符号 值”
                    大于和小于 不推荐直接写符号！实体符号 htmL > &gt; < &lt;

        where标签的作用有两个:
            1. 自动添加where关键字  where内部有任何一个if满足,自动添加where关键字,不满足去掉where!
            2. 自动去掉多余的and 和 or 关键字
    -->
    <sql id="selectAll">
        SELECT * FROM t_emp
    </sql>
    <select id="query" resultType="com.mybatis.pojo.Employee">
        <include refid="selectAll" />
        <where>
            <if test="name != null">
                emp_name = #{name}
            </if>
            <if test="salary != null and salary &gt; 100">
                AND emp_salary = #{salary}
            </if>
        </where>
    </select>
    <!-- prefix属性指定要动态添加的前缀 -->
    <!-- suffix属性指定要动态添加的后缀 -->
    <!-- prefixOverrides属性指定要动态去掉的前缀，使用“|”分隔有可能的多个值 -->
    <!-- suffixOverrides属性指定要动态去掉的后缀，使用“|”分隔有可能的多个值 -->
    <!-- 当前例子用where标签实现更简洁，但是trim标签更灵活，可以用在任何有需要的地方 -->
    <select id="queryTrim" resultType="com.mybatis.pojo.Employee">
        SELECT * FROM t_emp
        <trim prefix="where" prefixOverrides="and|or">
            <if test="name != null">
                emp_name = #{name}
            </if>
            <if test="salary != null and salary &gt; 100">
                AND emp_salary = #{salary}
            </if>
        </trim>
    </select>
    <!--
     第一种情况：第一个when满足条件 where emp_name=?
     第二种情况：第二个when满足条件 where emp_salary < 3000
     第三种情况：两个when都不满足 where 1=1 执行了otherwise
     -->
    <select id="queryChoose" resultType="com.mybatis.pojo.Employee">
        SELECT * FROM t_emp WHERE
        <choose>
            <when test="name != null">
                emp_name = #{name}
            </when>
            <when test="salary != null and salary &gt; 100">
                AND emp_salary = #{salary}
            </when>
            <otherwise>
                1=1
            </otherwise>
        </choose>
    </select>

    <!--

        //根据员工id更新员工的数据，我们要求 传入的name和salary不为null的才更新
        int update(Employee employee);

        全部满足： 没问题
        第一个满足： 多个了一个 ,
        第二个满足： 没问题
        都不满足： 语法错误

        set: 1.自动去掉多余的 ,
             2.自动添加set关键字
    -->
    <update id="update">
        UPDATE t_emp
        <set>
            <if test="emp_name != null">
                emp_name = #{name},
            </if>
            <if test="emp_salary != null">
                emp_salary = #{salary}
            </if>
        </set>
        WHERE emp_id = #{id}
    </update>
    <update id="updateTrim">
        UPDATE t_emp
        <trim prefix="set" suffixOverrides=",">
            <if test="emp_name != null">
                emp_name = #{name},
            </if>
            <if test="emp_salary != null">
                emp_salary = #{salary}
            </if>
        </trim>
        WHERE emp_id = #{id}
    </update>
    <select id="queryBatch" resultType="com.mybatis.pojo.Employee">
        SELECT * FROM t_emp WHERE emp_id
        IN
        <!-- 遍历的数据
          ( 1 , 2 , 3  )

           collection="ids | arg0 | list"
           open 遍历之前要追加的字符串
           close 遍历结束需要添加的字符串
           separator 每次遍历的分割符号！ 如果是最后一次，不会追加
           item 获取每个遍历项

           （ 1，2 ，3 ）

        -->
        <foreach collection="ids" open="(" separator="," close=")" item="id">
            <!-- 遍历的内容， #{遍历项 item指定的key}-->
            #{id}
        </foreach>
    </select>

    <delete id="deleteBatch">
        DELETE FROM t_emp WHERE emp_id
        IN
        <foreach collection="ids" open="(" separator="," close=")" item="id">
            #{id}
        </foreach>
    </delete>

    <insert id="insertBatch">
        INSERT INTO t_emp
        VALUES
            <foreach collection="employeeList" separator="," item="employee">
                (#{employee.empName},#{employee.empSalary})
            </foreach>
    </insert>

    <!-- 如果一个标签设计多个语句！ 需要设置允许执行多语句 ！ allowMultiQueries=true-->
    <update id="updateBatch">
        <foreach collection="employeeList" item="emp">
            UPDATE t_emp
            SET emp_name = #{emp.empName},emp_salary = #{emp.empSalary}
            WHERE emp_id = #{emp.empId};
        </foreach>
    </update>

</mapper>